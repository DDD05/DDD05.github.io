<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-23T03:24:01+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">슬기로운 개발생활</title><subtitle>슬기로운 개발생활</subtitle><author><name>Seongjun Lee</name></author><entry><title type="html">Docker를 사용해서 간단한 로컬 DB 셋팅</title><link href="http://localhost:4000/%EC%9D%BC%EC%83%81/2021/01/22/make-local-db-container-using-docker/" rel="alternate" type="text/html" title="Docker를 사용해서 간단한 로컬 DB 셋팅" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9D%BC%EC%83%81/2021/01/22/make-local-db-container-using-docker</id><content type="html" xml:base="http://localhost:4000/%EC%9D%BC%EC%83%81/2021/01/22/make-local-db-container-using-docker/">&lt;h1 id=&quot;목적&quot;&gt;목적&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;같은 포트에서 간단한 명령어를 통해 여러 버전, 다양한 DB를 관리하기 위함.&lt;/li&gt;
  &lt;li&gt;작은 프로젝트라 같은 서버에 (디비+ 백 + 프론트) 배포 할 목적, 미리 배포 환경을 셋팅 할 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;-스토리&quot;&gt;📖 스토리&lt;/h1&gt;

&lt;p&gt;회사 동기와 간단하게 프로젝트를 진행하게 되었다.&lt;/p&gt;

&lt;p&gt;백엔드는 MySQL과 Spring을 이용하여 서버를 만들었고 간단한 미팅을 통해 DB모델링과 아키텍처를 설계하고 Back과 Front는 REST API를 통해 데이터를 주고 받으며 작업 공간을 분리하기로 하였다.&lt;/p&gt;

&lt;p&gt;백엔드쪽에서 swagger가 완성되고 아직 배포 환경이 셋팅되지않아 직접 로컬에서 서버를 실행 시켜확인해야 했고, 이러한 광정에서 도커를 이용해서 간편하게 껏다 킬 수 있는 디비를 셋팅 해볼까한다.😁&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;️-설치-가이드&quot;&gt;⚙️ 설치 가이드&lt;/h1&gt;

&lt;h2 id=&quot;도커-설치&quot;&gt;도커 설치&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.notion.so/donaldd/Docker-2a385060554b429aac487405550d11fc#6676687b26554c0cbc00903dd4b2446b&quot;&gt;Docker&lt;/a&gt;를 설치한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설치가 완료되면 기본적으로 튜토리얼을 실행시켜 사용하기 전 올바르게 설치되어있는지 확인할 수 있습니다. (선택)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker01.png&quot; alt=&quot;docker01&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;위 명령어를 통해 도커에서 제공하는 기본 스타트 프로젝트를 클론 받습니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker02.png&quot; alt=&quot;docker02&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;클론 받은 경로로 이동하여 도커 파일을 빌드합니다.&lt;/p&gt;

    &lt;p&gt;빌드를 성공하면 도커 이미지가 생성됩니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker03.png&quot; alt=&quot;docker03&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;생성한 도커 이미지 파일을 80포트로 실행한다. 이렇게 되면 도커 컨테이너가 올라가게 된다. (접속가능)
 브라우저에 localhost로 접속해보면 아래와 같은 화면을 볼 수 있습니다. 😋&lt;/p&gt;

    &lt;p&gt;아래와 같은 화면이 뜨면 도커가 올바르게 실행되고 있다는 뜻입니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker04.png&quot; alt=&quot;docker04&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;도커에는 도커 허브라는 이미지를 공유하는 커뮤니티 공간이 있는데 github과 비슷합니다.&lt;/p&gt;

    &lt;p&gt;이 공간을 통해서 타사에서 제공하는 미리 셋팅된 이미지를 클론받아 빠르고 쉽게 환경을 구축 할 수 있습니다.&lt;/p&gt;

    &lt;p&gt;또 자신만의 배포 환경이나 배포 버전을 관리하여 배포하고 싶은 서버에서 클론받아 실행시켜 편리하게 환경을 구축 할 수 있습니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker05.png&quot; alt=&quot;docker05&quot; /&gt;
 &lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker06.png&quot; alt=&quot;docker06&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;mysql-컨테이너-실행&quot;&gt;MySQL 컨테이너 실행&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/mysql&quot;&gt;MySQL&lt;/a&gt;이 도커 허브에서 이미지를 공식적으로 제공합니다.&lt;/p&gt;

&lt;p&gt;일단 원하는 DB와 버전을 확인합니다. 저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL 5.7.30&lt;/code&gt; 버전을 사용하기로 했습니다.
터미널을 열어 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull mysql:tag&lt;/code&gt; 명령어를 실행합니다 (tag에는 버전을 기입)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker07.png&quot; alt=&quot;docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;pull을 성공적으로 했다면 mysql 이미지가 생겼을 것이다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; 명령어를 통해 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker08.png&quot; alt=&quot;docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 이미지를 통해 컨테이너를 생성하고 실행해보겠습니다.&lt;/p&gt;

&lt;p&gt;컨테이너 생성은 이미지를 한번이라도 실행시키면 자동으로 생성됩니다. 이렇게 만들어진 컨테이너는 명령어를 통해 작동을 컨트롤 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3306:3306 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; to-do-noti-2007-db-mysql &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /Users/ddd/Documents/repository/To-do-list2007/DB:/var/lib/mysql mysql:5.7.30 &lt;span class=&quot;nt&quot;&gt;--character-set-server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8mb4 &lt;span class=&quot;nt&quot;&gt;--collation-server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8mb4_unicode_ci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- d: 백그라운드에서 실행
- p: 포트 설정
- e: 환경 변수 설정
- name: 컨테이너 이름
- v: 저장소를 마운트 (컨테이너를 삭제 시 데이터 복구가 힘들 것 같아서)
- 마지막은 실행 시킬 이미지와 버전 그리고 옵션을 추가해서 한글 입력이 가능하도록 만들었습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령어를 실행하면 이제 백그라운에서 mysql container를 실행합니다.
확인을 해보고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 명령어를 입력해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker09.png&quot; alt=&quot;docker&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;혹시나 실행되지 않는다면 기존의 설치된 DB와 포트가 충돌했을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정상적으로 컨테이너가 실행되고 있는 것을 확인 할 수 있습니다.
해당 DB로 접속해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; to-do-noti-2007-db-mysql bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령어를 통해 컨테이너의 bash로 접속합니다. 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -u root -p&lt;/code&gt; 명령어를 통해 설치한 mysql로 접속합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-local-db-container-using-docker/docker10.png&quot; alt=&quot;docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;심화-docker-compose로-관리&quot;&gt;[심화] docker-compose로 관리&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker-compose는 도커 파일 또는 컨테이너를 효율적으로 실행시키고 설정들을 문서화하여 관리 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;docker-compose.yml 파일을 만듭니다.&lt;/p&gt;

&lt;p&gt;좋은 예제가 있어서 공유하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;// docker-compose.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 파일 규격 버전&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 이 항목 밑에 실행하려는 컨테이너 들을 정의&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 서비스 명&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:5.7.30&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 사용할 이미지&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ddd05-todoNoti-mysql&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 컨테이너 이름 설정&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306:3306&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 접근 포트 설정 (컨테이너 외부:컨테이너 내부)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# -e 옵션&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1234&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# MYSQL 패스워드 설정 옵션&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 명령어 실행&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--character-set-server=utf8mb4&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--collation-server=utf8mb4_unicode_ci&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/Users/ddd/Documents/repository/To-do-list-noti2007/DB:/var/lib/mysql&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# -v 옵션 (다렉토리 마운트 설정)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 입니다.&lt;/p&gt;</content><author><name>Seongjun Lee</name></author><category term="Docker" /><category term="DB" /><category term="MySQL" /><summary type="html">목적</summary></entry><entry><title type="html">Vue와 CMS를 이용하여 나의 개발 블로그 만들기</title><link href="http://localhost:4000/%EC%9D%BC%EC%83%81/2021/01/20/make-dev-blog/" rel="alternate" type="text/html" title="Vue와 CMS를 이용하여 나의 개발 블로그 만들기" /><published>2021-01-20T00:00:00+09:00</published><updated>2021-01-20T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9D%BC%EC%83%81/2021/01/20/make-dev-blog</id><content type="html" xml:base="http://localhost:4000/%EC%9D%BC%EC%83%81/2021/01/20/make-dev-blog/">&lt;blockquote&gt;
  &lt;p&gt;개발 블로그 만들기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;경력은 쌓여가는데 슬프게도 개발 실력이 쌓이지 않는 불안감에서 시작하게되었고, 요즘 개발자들 사이에서 개인 블로그를 만든는 것이 유행이라는 말에 바로 만들어 보기로했다.😁&lt;/p&gt;

&lt;p&gt;개발하면서 고민하거나 겪었던 이슈를 기록하고 나와 다른 개발자들에게 도움이 될 수 있는 공간을 만들고 싶었고, 마지막으로 나의 커리어를 어필하는 용도로 블로그가 매우 적합하다고 생각했다.&lt;/p&gt;

&lt;h1 id=&quot;기술-스택-&quot;&gt;기술 스택 🔨&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Back, Contentful of CMS&lt;/li&gt;
  &lt;li&gt;Front, Vue.js&lt;/li&gt;
  &lt;li&gt;Deploy, Nutify&lt;/li&gt;
  &lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;환경셋팅이 쉬운 기술을 이용하여 개발시간을 최대로 줄임 ( 저는 기술을 공부하고 사용한다고 5시간이나 걸림;;; )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cms란&quot;&gt;CMS란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Contents Management System, 콘텐츠 관리 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용이유&quot;&gt;사용이유&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Back&lt;/code&gt;이 필요없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;프론트 &amp;amp; 디자인&lt;/code&gt;으로만 웹 사이트를 만들어 낼 수 있음.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;오픈소스라서 무료&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;기능 및 속도가 좋음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;편하게 컨텐츠를 관리 가능&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;간단한 회사 홈페이지나 개인 홈페이지, 블로그 등은 CMS로 간단하게 만들 수 있음.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;contentful-api&quot;&gt;Contentful api&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CMS의 오픈소스 중 하나 5,000 엔티티까지 무료&lt;/li&gt;
  &lt;li&gt;워드프레스 사용자들은 익숙하게 사용 가능&lt;/li&gt;
  &lt;li&gt;여튼 직관적이여서 편해 보이며 사용 오픈소스가 많아보임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-dev-blog/Untitled00.png&quot; alt=&quot;contentful&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컨텐츠 관리하는 화면, Status를 통해 글을 publish 할지 안할지 결정 가능&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-dev-blog/Untitled01.png&quot; alt=&quot;contentful&quot; /&gt;&lt;/p&gt;

&lt;p&gt;글을 작성할때 필요한 템플릿을 커스텀하여 결정 가능&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-dev-blog/Untitled02.png&quot; alt=&quot;contentful&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컨텐츠를 작서하는 화면으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mark dowm&lt;/code&gt;을 지원하여 언어만 알고있다면 편하게 글 쓰기 가능, 또 그림등도 업로드후 URI를 통해 표현가능&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;화면만들기-&quot;&gt;화면만들기 👨‍💻&lt;/h1&gt;

&lt;p&gt;Vue.js를 이용하여 프론트를 만들어보았다. UI 라이브러리는 &lt;a href=&quot;https://vuetifyjs.com/en/&quot;&gt;Vuetify&lt;/a&gt;를 이용하였다.&lt;/p&gt;

&lt;h2 id=&quot;작업-순서&quot;&gt;작업 순서&lt;/h2&gt;

&lt;p&gt;Contentful plugin을 설치한 후 import만 하면된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;vue 프로젝트를 생성&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; vue create &lt;span class=&quot;s2&quot;&gt;&quot;PROJECT_NAME&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;plugin을 설치&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; npm install contentfull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설치한 플러그인을 import&lt;/p&gt;

    &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// ./plugins/contentful.js&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentful&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'contentful'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// use default environment config for convenience&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// these will be set via `env` property in nuxt.config.js&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VUE_APP_CTF_SPACE_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Space id&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VUE_APP_CTF_CDA_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Token&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;// export `createClient` to use it in page components&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;nx&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// app.vue &amp;lt;script&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentful&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@/plugins/contentful.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// import contentful&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return createClient()&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;appbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;vfooter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;vview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;setPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;setPosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// vuex의 state.posts에 넣는 메소드&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 프로젝트를 실행 할 때 모든 컨텐츠를 가지고와서 정적으로 사용할 예정&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// Vuex의 state.posts 변수에 담김&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-img/make-dev-blog/Untitled03.png&quot; alt=&quot;contentful&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;배포하기&quot;&gt;배포하기&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Nutify&lt;/code&gt; 를 이용해서 배포.&lt;/p&gt;

&lt;h2 id=&quot;nutify란&quot;&gt;Nutify란?&lt;/h2&gt;

&lt;p&gt;GitHub, GitLab 계정 연동 및 &lt;strong&gt;쉬운 호스팅을 제공, 지속적 배포, One-Click HTTPS&lt;/strong&gt; 제공해줌.&lt;/p&gt;

&lt;h3 id=&quot;사용이유-1&quot;&gt;사용이유&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;서버사이드 렌더링 지원&lt;/li&gt;
  &lt;li&gt;https 무료 지원&lt;/li&gt;
  &lt;li&gt;심플하고 깔끔한 인터페이스&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;일단 contentful에 글을 쓸때나 git에서 push를 했을때 hook을 통해 자동으로 Build 작업을 해주는 아주 멋진 녀석🤣. 무료로 DNS를 제공해줌.&lt;/p&gt;

&lt;h3 id=&quot;진짜-쉬운-사용방법&quot;&gt;진짜 쉬운 사용방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;깃허브 연결&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://heropy.blog/images/screenshot/netlify_1_new_site.jpg&quot; alt=&quot;https://heropy.blog/images/screenshot/netlify_1_new_site.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;호스팅 할려는 프로젝트 선택&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-dev-blog/Untitled04.png&quot; alt=&quot;contentful&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브런치 선택 후 빌드되는 경로 선택&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://heropy.blog/images/screenshot/netlify_1_deploy_setting.jpg&quot; alt=&quot;https://heropy.blog/images/screenshot/netlify_1_deploy_setting.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;published&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DNS를 자신이 원하는 것으로 바꿀수 있3&lt;/li&gt;
      &lt;li&gt;현재 배포 상테를 체크할 수 있음&lt;/li&gt;
      &lt;li&gt;github의 hook 연결과 contentful hook 연결을 통해 빌드 자동화 가능&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/post-img/make-dev-blog/Untitled05.png&quot; alt=&quot;contentful&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seongjun Lee</name></author><category term="Vue.js" /><category term="CMS" /><category term="Nutify" /><category term="blog" /><summary type="html">개발 블로그 만들기</summary></entry></feed>